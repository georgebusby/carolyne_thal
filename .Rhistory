plot(NA, type="n", xlim=c(0, d), ylim=c(0, d), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
rasterImage(as.raster(x, max = 1.01,col = ld.cols),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
}
set.seed(123)
m <- matrix(runif(100), 10, 10)
plotTriMatrix(m)
plotTriMatrix(r.mat)
plot(0, type = "n", xlim=c(0,ncol(r.mat)),ylim=c(0,nrow(r.mat)))
image(1:ncol(r.mat),
1:nrow(r.mat),
r.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = F)
## ADD D MATRIX
image(1:ncol(r.mat),
1:nrow(r.mat),
d.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = T)
## ACTUALLY ROATING THIS MATRIX IS NOT TRIVIAL ....
plotTriMatrix <- function(x) {
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d
## empty plot area
plot(NA, type="n", xlim=c(0, d), ylim=c(0, d), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
rasterImage(as.raster(x, max = 1.01),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
}
set.seed(123)
m <- matrix(runif(100), 10, 10)
plotTriMatrix(m)
plotTriMatrix(r.mat)
rasterImage(as.raster(x, max = 1.01),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
plotTriMatrix(r.mat)
plotTriMatrix <- function(x) {
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d
## empty plot area
plot(NA, type="n", xlim=c(0, d), ylim=c(0, d), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
rasterImage(as.raster(x, max = 1.01),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
}
set.seed(123)
m <- matrix(runif(100), 10, 10)
plotTriMatrix(m)
plotTriMatrix(r.mat)
as.raster(x, max = 1.01)
as.raster(rgb(x), max = 1.01)
plotTriMatrix(r.mat)
rasterImage(as.raster(x, max = 1.01),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d
## empty plot area
plot(NA, type="n", xlim=c(0, d), ylim=c(0, d), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
rasterImage(as.raster(x, max = 1.01),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
rasterImage(as.raster(x, max = 1.01),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
rasterImage(as.raster(x, max = 1.0001),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
x
r.mat <- d.mat <- matrix(0,nr = length(levels(ld.subset)),nc = length(levels(ld.subset)))
for(i in 1:nrow(r.mat))
{
for(j in 1:ncol(r.mat))
{
if(j != i)
{
row.selection <- ld.subset==levels(ld.subset)[i]
col.selection <- ld.subset==levels(ld.subset)[j]
r <- max(d$R[row.selection,col.selection]^2)
d2 <- max(d$D[row.selection,col.selection])
if(is.infinite(r)) r <- NA
if(is.infinite(d2)) d2 <- NA
r.mat[i,j] <- r
d.mat[i,j] <- d2
}
}
}
# diag(r.mat) <-  diag(d.mat) <-  NA
# # ld.mat <- r.mat
# # ld.mat[lower.tri(ld.mat)] <- d.mat[lower.tri(d.mat)]
# r.mat[lower.tri(r.mat)] <- NA
# d.mat[upper.tri(d.mat)] <- NA
## PLOT R MATRIX
# Make two square regions side by side
plot(0, type = "n", xlim=c(0,ncol(r.mat)),ylim=c(0,nrow(r.mat)))
image(1:ncol(r.mat),
1:nrow(r.mat),
r.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = F)
## ADD D MATRIX
image(1:ncol(r.mat),
1:nrow(r.mat),
d.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = T)
## ACTUALLY ROATING THIS MATRIX IS NOT TRIVIAL ....
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d
## empty plot area
plot(NA, type="n", xlim=c(0, d), ylim=c(0, d), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
rasterImage(as.raster(x, max = 1.0001),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
r.mat
hist(r.mat)
d <- compute.ld(t(ld.haps))
## we want to average LD across some increments
## lets try 100kb
n <- 100
pos.increments <- pretty(snp.pos.g,n)
ld.cols <- rev(heat.colors(n))
ld.subset <- cut(snp.pos.g, pos.increments)
r.mat <- d.mat <- matrix(0,nr = length(levels(ld.subset)),nc = length(levels(ld.subset)))
for(i in 1:nrow(r.mat))
{
for(j in 1:ncol(r.mat))
{
if(j != i)
{
row.selection <- ld.subset==levels(ld.subset)[i]
col.selection <- ld.subset==levels(ld.subset)[j]
r <- max(d$R[row.selection,col.selection]^2)
d2 <- max(d$D[row.selection,col.selection])
if(is.infinite(r)) r <- NA
if(is.infinite(d2)) d2 <- NA
r.mat[i,j] <- r
d.mat[i,j] <- d2
}
}
}
# diag(r.mat) <-  diag(d.mat) <-  NA
# # ld.mat <- r.mat
# # ld.mat[lower.tri(ld.mat)] <- d.mat[lower.tri(d.mat)]
# r.mat[lower.tri(r.mat)] <- NA
# d.mat[upper.tri(d.mat)] <- NA
## PLOT R MATRIX
# Make two square regions side by side
plot(0, type = "n", xlim=c(0,ncol(r.mat)),ylim=c(0,nrow(r.mat)))
image(1:ncol(r.mat),
1:nrow(r.mat),
r.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = F)
## ADD D MATRIX
image(1:ncol(r.mat),
1:nrow(r.mat),
d.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = T)
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(NA, type="n", xlim=c(0, d), ylim=c(0, d), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
rasterImage(as.raster(x, max = 1.0001),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
d <- compute.ld(t(ld.haps))
## we want to average LD across some increments
## lets try 100kb
n <- 100
pos.increments <- pretty(snp.pos.g,n)
ld.cols <- rev(heat.colors(n))
ld.subset <- cut(snp.pos.g, pos.increments)
r.mat <- d.mat <- matrix(0,nr = length(levels(ld.subset)),nc = length(levels(ld.subset)))
for(i in 1:nrow(r.mat))
{
for(j in 1:ncol(r.mat))
{
if(j != i)
{
row.selection <- ld.subset==levels(ld.subset)[i]
col.selection <- ld.subset==levels(ld.subset)[j]
r <- max(d$R[row.selection,col.selection]^2)
d2 <- max(d$D[row.selection,col.selection])
if(is.infinite(r)) r <- NA
if(is.infinite(d2)) d2 <- NA
r.mat[i,j] <- r
d.mat[i,j] <- d2
}
}
}
plot(0, type = "n", xlim=c(0,ncol(r.mat)),ylim=c(0,nrow(r.mat)))
image(1:ncol(r.mat),
1:nrow(r.mat),
r.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = F)
image(1:ncol(r.mat),
1:nrow(r.mat),
d.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = T)
diag(r.mat) <-  diag(d.mat) <-  NA
# # ld.mat <- r.mat
# # ld.mat[lower.tri(ld.mat)] <- d.mat[lower.tri(d.mat)]
r.mat[lower.tri(r.mat)] <- NA
d.mat[upper.tri(d.mat)] <- NA
## PLOT R MATRIX
# Make two square regions side by side
plot(0, type = "n", xlim=c(0,ncol(r.mat)),ylim=c(0,nrow(r.mat)))
image(1:ncol(r.mat),
1:nrow(r.mat),
r.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = F)
## ADD D MATRIX
image(1:ncol(r.mat),
1:nrow(r.mat),
d.mat,col = ld.cols,
axes = F, xlab = "",ylab = "",
add = T)
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(NA, type="n", xlim=c(0, d1), ylim=c(0, d1), xlab="", ylab="", asp=1)
rasterImage(as.raster(x, max = 1.0001),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
as.raster(x, max = 1.0001)
?as.raster
?image
rasterImage(as.raster(x, max = 1.0001, col = ld.cols),
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
as.raster
?as.raster
?breaks
image(r.mat)
cut(r.mat,length(ls.cols))
cut(r.mat,length(ld.cols))
x <- ld.cols[cut(x,length(ld.cols))]
x
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(NA, type="n", xlim=c(0, d1), ylim=c(0, d1), xlab="", ylab="", asp=1)
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
plot(NA, type="n", xlim=c(-d1, d1), ylim=c(0, d1), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
## empty plot area
plot(NA, type="n", xlim=c(0, d1), ylim=c(-d1, d1), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
plot(NA, type="n", xlim=c(0, d1), ylim=c(-nrow(x), nrow(x)), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
d1
## ACTUALLY ROATING THIS MATRIX IS NOT TRIVIAL ....
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(NA, type="n", xlim=c(0, d1), ylim=c(-nrow(x), nrow(x)), xlab="", ylab="", asp=1)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
c(-nrow(x), nrow(x))
c(0, d1)
plot(NA, type="n", xlim=c(0, d1), ylim=c(-nrow(x), nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i")
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
plot(NA, type="n", xlim=c(0, d1), ylim=c(-nrow(x), nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = F)
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(NA, type="n", xlim=c(0, d1), ylim=c(-nrow(x), nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = F)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
x <- r.mat
## clear lower triangle
# x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(NA, type="n", xlim=c(0, d1), ylim=c(-nrow(x), nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = F)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
plot(NA, type="n", xlim=c(0, d1), ylim=c(-nrow(x), nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = T)
NA
c(0, d1)
plot(NA, type="n", xlim=c(0, 50), ylim=c(-nrow(x), nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = T)
plot(0, type="n", xlim=c(0, 50), ylim=c(-nrow(x), nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = T)
plot(0, type="n", xlim=c(0, d1), ylim=c(0, nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = T)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
## ACTUALLY ROATING THIS MATRIX IS NOT TRIVIAL ....
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(0, type="n", xlim=c(0, d1), ylim=c(0, nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = T)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
## ACTUALLY ROATING THIS MATRIX IS NOT TRIVIAL ....
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(0, type="n", xlim=c(0, d1), ylim=c(0,- nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = T)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
## ACTUALLY ROATING THIS MATRIX IS NOT TRIVIAL ....
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(0, type="n", xlim=c(0, d1), ylim=c(0,-nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = T)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=90)
## ACTUALLY ROATING THIS MATRIX IS NOT TRIVIAL ....
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(0, type="n", xlim=c(0, d1), ylim=c(-nrow(x),nrow(x)),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = T)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
## ACTUALLY ROATING THIS MATRIX IS NOT TRIVIAL ....
x <- r.mat
## clear lower triangle
x[lower.tri(x)] <- NA
## calculate diag
nr <- nrow(x)
nc <- ncol(x)
d1 <- sqrt(nr^2 + nc^2)
d2 <- 0.5 * d1
## empty plot area
plot(0, type="n", xlim=c(0, d1), ylim=c(-nrow(x)/2,nrow(x)/2),
xlab="", ylab="", asp=1, xaxs = "i",yaxs = "i",
axes = T)
## plot matrix and rotate 45
x <- matrix(ld.cols[cut(x,length(ld.cols))],nc=ncol(x),byrow=T)
plot.raster <- as.raster(x)
rasterImage(plot.raster,
xleft=d2, xright=d2+nc, ybottom=-d2, ytop=-d2+nr,
interpolate=FALSE, angle=45)
