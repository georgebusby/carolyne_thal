{
    "collab_server" : "",
    "contents" : "###################################################################\n#############         Script for plotting haplotypes      #########\n###################################################################\n###################################################################\n## LOAD ANY EXTERIOR FUNCTIONS AND LIBRARIES\nlibrary(\"RSQLite\") \nsource(\"functions/plot_genes.R\")\nsource(\"functions/loadGeneticMap.R\")\nsource(\"functions/line2user.R\")\n## \n\n## DEFINE PARAMETERS\nchrom <- \"16\"\n########################\n## 00 READ IN DATA\n## UNCOMMENT TO READ IN ONCE\n\n# #Read in gen and samples files\n# chr16.gen <- read.table (paste0(\"data/Kenya-2.5M_chr\",chrom,\":0-10000000_nature_2015_qc_set_merged.haps\"), header=F)\n# samples <- read.table (paste0(\"data/Kenya-2.5M_chr\",chrom,\":0-10000000_nature_2015_qc_set_merged.sample\"), header=T)\n# map <- read.table(paste0(\"data/genetic_map_chr\",chrom,\"_combined_b37.txt\"),header = T, as.is = T)\n# \n# \n# ## CONVERT TO SELSCAN FORMAT\n# selscan.haps <- t(chr16.gen[,7:ncol(chr16.gen)])\n# selscan.map <- chr16.gen[,c(1,3,4)]\n# colnames(selscan.map) <- c(\"chrom\",\"rsid\",\"position\")\n# # need to interpolate genetic distance and this were copied from the cluster\n# head(map)\n# head(selscan.map)\n# gen_dist <- approx(map$position, map$Genetic_Map.cM., selscan.map$position  )$y\n\n \n \n \n########################\n## 01 PLOT\n########################\n## DEFINE SOME PLOTTING PARAMETERS\n## haplotype colours\nhap.cols <- c(\"white\",\"black\")\n## colour for gene region highlight\ngene.region.col <- \"red\"\n## axis label size\naxis.lab.cex <- 1\npanel.label.cex <- 1.2\n## haplotype plot region\nhap.plot.beg <- 0\nhap.plot.end <- 2e6\n## gene/recrates plot region\ngene.plot.beg <- 0\ngene.plot.end <- 0.5e6\n## y axix limits for recrates\nrec_y_at <- c(0,5,10)\n\n## should you plot all three recombination maps\nplot.three.maps <- FALSE\n\n\n########################\n## DEFINE REGION TO PLOT HAPLOTYPES\n## here this is for all snps between 0 and 2Mb\nhap.plot.region <- which(selscan.map$position>hap.plot.beg&selscan.map$position<=hap.plot.end)\n## DEFINE REGION TO ZOOM IN FOR GENE PLOT AND RECRATES\n## here this is for SNPs between 0 and 0.5Mb\ngene.plot.region <- which(selscan.map$position>gene.plot.beg&selscan.map$position<=gene.plot.end) \n\n\npng(\"figures/AlphaThalHaplotypes.png\", width = 1000, height = 1200, res=150)\n\n  layout(matrix(c(1,2,4,3),4,1, byrow=T),heights = c(4,4,2,2))\n  snp.pos <- selscan.map$position[hap.plot.region]\n  snp.pos.g <- selscan.map$position[gene.plot.region]\n  plot_range <- range(snp.pos)\n  gene_region <- range(snp.pos.g)\n \n  par(mar=c(0,6,4,1))\n  # plot individuals with alpha_thal\n  a.thal.haps <- selscan.haps[selscan.haps[,72]==1,hap.plot.region]\n  a.thal.haps <- a.thal.haps#[1:100,]\n  image(snp.pos,\n        1:nrow(a.thal.haps),\n        t(a.thal.haps), col=hap.cols,\n        axes = F, xlab = \"\", ylab = \"\",\n        xaxs = \"i\", yaxs = \"i\")\n  # add line\n  abline(v=which(selscan.map$rsid[hap.plot.region]==\"alphathal\"),col=\"blue\",lwd=3)\n  abline(v = gene.plot.region, lwd = 2, xpd = F, col = \"red\")\n  xat <- pretty(snp.pos)\n  xat[1] <- selscan.map$position[1]\n  axis(3, at = xat, labels = paste0(round(xat/1e6,1),\"Mb\"), xpd = T)\n  segments(gene_region[1], nrow(a.thal.haps),gene_region[1],-500,col = gene.region.col, lwd = 2, xpd = T)\n  segments(gene_region[2], nrow(a.thal.haps),gene_region[2],-500,col = gene.region.col, lwd = 2, xpd = T)\n  title(ylab = expression(alpha~haplotypes))\n  #mtext(3, text = paste0(\"Position on chromosome \", chrom), line = 2)\n  mtext(3,text = \"A\", adj = -0.1, cex = panel.label.cex, xpd = T, font = 2)\n  \n  # plot individuals without alpha_thal\n  n.thal.haps <- selscan.haps[selscan.haps[,72]==0,hap.plot.region]\n  n.haps <- sample(1:nrow(n.thal.haps), size = nrow(a.thal.haps))\n  n.thal.haps <- n.thal.haps[n.haps,]\n  par(mar=c(3,6,1,1))\n  image(snp.pos,\n        1:nrow(n.thal.haps),\n        t(n.thal.haps), col=hap.cols,\n        axes = F, xlab = \"\", ylab = \"\",\n        xaxs = \"i\", yaxs = \"i\")\n  # add lines\n  abline(v=which(selscan.map$rsid[hap.plot.region]==\"alphathal\"),col=\"blue\",lwd=3)\n  segments(gene_region[1], nrow(n.thal.haps)+500,gene_region[1],-500,col = gene.region.col, lwd = 2, xpd = T)\n  segments(gene_region[2], nrow(n.thal.haps)+500,gene_region[2],-500,col = gene.region.col, lwd = 2, xpd = T)\n  title(ylab = expression(-~haplotypes))\n  mtext(3,text = \"B\", adj = -0.1, cex = panel.label.cex, xpd = T, font = 2)\n  #######################################################\n  ### Code to load genetic maps from Gav\n  filename <- \"data/maps_b37.sqlite\"\n  gm <- loadGeneticMap(chrom,filename=filename)  \n  par(mar=c(3,6,0,1))\n  plot(gm$position[gm$chromosome==chrom],gm$COMBINED_LD_rate[gm$chromosome==chrom]*1e6,\n       xlim=range(snp.pos.g), type = \"S\", ylim = c(0,max(rec_y_at)),\n       axes = F, xlab = \"\", xaxs = \"i\", ylab = \"\", yaxs = \"i\")# \"Recom.  \\nRate(cM/Mb)\")\n  box()\n  title(ylab = \"Recom.\\nRate\\n(cM/Mb)\", las = 0, line = 3, adj = 0.4,cex.lab = axis.lab.cex, xpd = T)\n  axis(2, at = rec_y_at, labels = rec_y_at, las = 2, cex.axis = axis.lab.cex)\n\n  leg.2.plot <- 1\n  if(plot.three.maps ==  TRUE)\n  {\n    ## PLOT AFRICA MAP [BLUE]\n    points(gm$position[gm$chromosome==chrom],gm$YRI_LD_rate[gm$chromosome==chrom]*1e6,type = \"S\", col = \"blue\", lty = 2)\n    ## PLOT AFRICA ENRICHED MAP [RED]\n    points(gm$position[gm$chromosome==chrom],gm$African_Enriched_rate[gm$chromosome==chrom]*1e6,type = \"S\", col = \"red\", lty = 3)\n    leg.2.plot <- 1:3\n  }\n  \n  legend(\"topleft\",xpd = T,inset=c(0,0.1),\n         legend=c(\"HapMap combined\",\"HapMap YRI\", \"Africa enriched\")[leg.2.plot],x.intersp = 0.35,\n         col = c(\"black\",\"blue\",\"red\")[leg.2.plot], lty = c(1,2,3)[leg.2.plot], bty = \"n\", horiz = T, cex = axis.lab.cex)\n  \n  ## PLOT X AXIS\n  x_at <- pretty(snp.pos.g)\n  x_at[1] <- snp.pos.g[1]\n  axis(1,at=x_at,labels=paste0(round(x_at/1e6,1),\"Mb\"), cex.axis = axis.lab.cex, xpd = T)\n  title(xlab = paste0(\"Position on chromosome \",chrom), line = 2, cex.lab = axis.lab.cex)\n  mtext(3,text = \"D\", adj = -0.1, cex = panel.label.cex, xpd = T, font = 2)\n  #######################################################\n  ### PLOT GENES\n  genes <- load.genes( \"data/UCSC_hg19_2015-08-18_refGene.tsv\" )\n  genes <- genes[genes$cdsStartStat!=\"unk\",]\n  genes <- genes[genes$txEnd<=range(snp.pos)[2],]\n  # genes <- genes[grep(\"^HB\",genes$name2),]\n  par(mar=c(1,6,1.5,1)) \n  plot.genes( chromosome = chrom, region = range(snp.pos.g), genes,\n              xaxt = \"n\" ,plot.ylab = \"\", label.cex = 1,\n              xaxs = \"i\", yaxs = \"i\", axes = F)\n  title(ylab = \"Genes\", las = 0, line = 3, cex.lab = axis.lab.cex)\n \n  ## PLOT CONNECTING LINES\n  w <- which( genes$chromosome == chrom & genes$txEnd >= gene_region[1] & genes$txStart <= gene_region[2] )\n  \n  local.genes = genes[w,]\n  local.genes$y = NA ;\n  local.genes$y[1] = 1 ;\n  if( nrow( local.genes ) > 1 ) {\n    spacer = ( gene_region[2] - gene_region[1] ) / 10 ;\n    maxes = ( local.genes[1,]$txEnd + spacer )\n    for( i in 2:nrow( local.genes )) {\n      for( l in 1:length( maxes )) {\n        if( local.genes$txStart[i] >= maxes[l] ) {\n          local.genes$y[i] = l ;\n          maxes[l] = local.genes$txEnd[i] + spacer ;\n          break ;\n        }\n      }\n      if( is.na( local.genes$y[i] )) {\n        maxes = c( maxes, local.genes$txEnd[i] + spacer )\n        local.genes$y[i] = length( maxes ) ;\n      }\n    }\n  }\n  ymax <- max( 2, max(local.genes$y)+0.5 )\n  \n  ## add a plot on top \n  par(mar=c(1,6,1,1)) \n  par(new = T)\n  plot(0,0,axes = F, ylim=c(0,ymax), type = \"n\",xlab = \"\", ylab = \"\",\n       xlim=range(snp.pos), xaxs = \"i\", yaxs = \"i\")\n  box(bty = \"u\", col = gene.region.col, lwd = 2)\n  ## ADD LINES\n  segments(plot_range[1], ymax, x1 = gene_region[1], y1 = line2user(1,3), col = gene.region.col ,xpd = T, lwd = 2)\n  segments(plot_range[2], ymax, x1 = gene_region[2], y1 = line2user(1,3), col = gene.region.col ,xpd = T, lwd = 2)\n\n  ## ## and lines around plot\n  segments(plot_range[1], ymax,plot_range[1],0,col = gene.region.col, lwd = 2, xpd = T)\n  segments(plot_range[2], ymax,plot_range[2],0,col = gene.region.col, lwd = 2, xpd = T)\n  mtext(3,text = \"C\", adj = -0.1, font = 2, cex = panel.label.cex, xpd = T)\n dev.off()\n\n",
    "created" : 1491311626501.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2354814218",
    "id" : "892CFBC8",
    "lastKnownWriteTime" : 1491313624,
    "last_content_update" : 1491313624998,
    "path" : "~/repos/carolyne_thal/plotThalHaploptypes.R",
    "project_path" : "plotThalHaploptypes.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}